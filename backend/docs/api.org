#+PROPERTY: header-args :session api :results output :exports both

* API
#+NAME: token
#+BEGIN_SRC shell :session none :results output silent :exports none
  make -s -C .. token
#+END_SRC

#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :results output silent :var token=token :exports none
  import subprocess
  import http.client
  import json
  
  token = token.strip()
  verbose = True

  def pp(data):
    print(json.dumps(data, indent=2, sort_keys=True))
    
  def silent(fn):
    global verbose
    verbose = False
    res = fn()
    verbose = True
    return res

  def api(method, url, data):
    conn = http.client.HTTPConnection('localhost:4000')
    conn.request(method, url, json.dumps(data) if data else None, {
      'Content-type': 'application/json',
      'Authorization': 'Bearer ' + token
    })
    response = conn.getresponse()
    
    if verbose:
      print("{} {}".format(response.status, response.reason))
    if response.status >= 200 and response.status <= 500:
      data = json.loads(response.read().decode())
      if verbose:
        print()
        print(json.dumps(data, indent=2, sort_keys=True))
      return data

  def GET(url):
    return api('GET', url, None)

  def POST(url, data):
    return api('POST', url, data)
#+END_SRC

#+RESULTS:

** Wallet info
#+BEGIN_SRC python
  _ = GET('/api/wallet')
#+END_SRC

#+RESULTS:
#+begin_example
200 OK

{
  "data": {
    "balance": {
      "msatoshi": 1000000000
    },
    "id": "e103ef6f-ed03-4166-ba5c-f083dcfe1515"
  }
}
#+end_example
** Invoice info
#+BEGIN_SRC python
  _ = GET('/api/wallet/invoice/lntb1500n1pd0c66dpp5p8rpzxck9u7umfl9u7dqratj8rlfthe29xl6ejhwt2exuaxfpftqdqvg9jxgg8zn2sscqzysyv8kgctq7haghaus4wqd262mxr9342mvp23gdsv6vmgkce9zgshjd0av06dq3xpe8cy6fucnj454smkqxuetyvu3h5jggx2w8ethlvcp6g3ldq')
#+END_SRC

#+RESULTS:
: 200 OK
: 
: {
:   "data": {
:     "description": "Foobar #ldq",
:     "dst_alias": "Barbaz #039",
:     "msatoshi": 150000
:   }
: }
** Process transaction (invoice)
#+BEGIN_SRC python
  _ = POST('/api/wallet/transactions', {"invoice": "lntb1500n1pd0c66dpp5p8rpzxck9u7umfl9u7dqratj8rlfthe29xl6ejhwt2exuaxfpftqdqvg9jxgg8zn2sscqzysyv8kgctq7haghaus4wqd262mxr9342mvp23gdsv6vmgkce9zgshjd0av06dq3xpe8cy6fucnj454smkqxuetyvu3h5jggx2w8ethlvcp6g3ldq"})
#+END_SRC

#+RESULTS:
#+begin_example
201 Created

{
  "data": {
    "description": "Foobar #ldq",
    "id": "ae9b1709-36b9-4664-913c-1a215c480b7d",
    "inserted_at": "2018-08-28T08:34:08.258116",
    "invoice": "lntb1500n1pd0c66dpp5p8rpzxck9u7umfl9u7dqratj8rlfthe29xl6ejhwt2exuaxfpftqdqvg9jxgg8zn2sscqzysyv8kgctq7haghaus4wqd262mxr9342mvp23gdsv6vmgkce9zgshjd0av06dq3xpe8cy6fucnj454smkqxuetyvu3h5jggx2w8ethlvcp6g3ldq",
    "msatoshi": -150000,
    "processed_at": "2018-08-28T08:34:08.311921",
    "state": "approved"
  }
}
#+end_example
** List transactions
#+BEGIN_SRC python
  _ = GET('/api/wallet/transactions')
#+END_SRC

#+RESULTS:
#+begin_example
200 OK

{
  "data": [
    {
      "description": "Foobar #ldq",
      "id": "ae9b1709-36b9-4664-913c-1a215c480b7d",
      "inserted_at": "2018-08-28T08:34:08.258116",
      "invoice": "lntb1500n1pd0c66dpp5p8rpzxck9u7umfl9u7dqratj8rlfthe29xl6ejhwt2exuaxfpftqdqvg9jxgg8zn2sscqzysyv8kgctq7haghaus4wqd262mxr9342mvp23gdsv6vmgkce9zgshjd0av06dq3xpe8cy6fucnj454smkqxuetyvu3h5jggx2w8ethlvcp6g3ldq",
      "msatoshi": -150000,
      "processed_at": "2018-08-28T08:34:08.311921",
      "state": "approved"
    },
    {
      "description": "Funding transaction",
      "id": "7a1ad37c-0645-4474-be5b-559f22fd9007",
      "inserted_at": "2018-08-28T08:34:00.006318",
      "msatoshi": 1000000000,
      "processed_at": null,
      "state": "approved"
    }
  ]
}
#+end_example
** Send Bitcoin to email address
*** Create transaction (payer)
#+BEGIN_SRC python :cache yes
  email_src_trn = POST('/api/wallet/transactions', {
      "to_email": "a@b.cz",
      "msatoshi": 1000,
      "description": "Free BTC",    # optional - visible to both payee & payer
      "expires_after": 900          # in seconds
  })['data']
#+END_SRC

#+RESULTS[add74a74026bf272a0270247a1c37396ad10f1ee]:
#+begin_example
201 Created

{
  "data": {
    "claim_expires_at": "2018-08-28T08:49:14.859790",
    "description": "Free BTC",
    "id": "bf1f4de9-18c1-4d6a-a315-88a782f58d03",
    "inserted_at": "2018-08-28T08:34:14.859925",
    "msatoshi": -1000,
    "processed_at": null,
    "state": "initial"
  }
}
#+end_example

**** With amount exceeding wallet balance
It returns declined transaction.

#+BEGIN_SRC python
  wallet = silent(lambda: GET('/api/wallet'))
  _ = POST('/api/wallet/transactions', {
      "to_email": "a@b.cz",
      "msatoshi": wallet['data']['balance']['msatoshi'] + 1,
      "description": "Free BTC",
      "expires_after": 900
  })
#+END_SRC

#+RESULTS:
#+begin_example
201 Created

{
  "data": {
    "claim_expires_at": "2018-08-27T07:15:34.543600",
    "description": "Free BTC",
    "id": "aa7b68af-ec32-4680-8975-1e38947b170e",
    "inserted_at": "2018-08-27T07:00:34.543679",
    "msatoshi": -999849001,
    "processed_at": "2018-08-27T07:00:34.549174",
    "state": "declined"
  }
}
#+end_example

**** With invalid amount
#+BEGIN_SRC python
  _ = POST('/api/wallet/transactions', {
      "to_email": "a@b.cz",
      "msatoshi": -1000, # <- can't send negative amount
      "description": "Free BTC",
      "expires_after": 900
  })
#+END_SRC

#+RESULTS:
: 400 Bad Request
: 
: {
:   "error": {
:     "detail": "Non-positive amount given"
:   }
: }

*** Claim transaction (payee)
**** Success
#+BEGIN_SRC python :cache yes
  _ = POST('/api/wallet/transactions', {"claim_token": "4dd171e7-c336-4eb1-8b0c-050e6965dc77"})
#+END_SRC

#+RESULTS[455f9d2496d1d7fcedc3a37dd1505599ab281c6b]:
#+begin_example
201 Created

{
  "data": {
    "description": "Free BTC",
    "id": "e56abb55-cdc3-4925-85fe-cc5fc89ec678",
    "inserted_at": "2018-08-28T08:34:37.419446",
    "msatoshi": 1000,
    "processed_at": "2018-08-28T08:34:37.419340",
    "state": "approved"
  }
}
#+end_example
***** Call is idempotent
#+BEGIN_SRC python :cache yes
  _ = POST('/api/wallet/transactions', {"claim_token": "b9beb314-6192-4934-8886-e8dbf77f723d"})
  _ = POST('/api/wallet/transactions', {"claim_token": "b9beb314-6192-4934-8886-e8dbf77f723d"})
#+END_SRC

#+RESULTS[30acbdc185c579d33aa484007cfa68a1f92af328]:
#+begin_example
201 Created

{
  "data": {
    "description": "Free BTC",
    "id": "c43b6820-0ea5-4869-80a5-095cb1ae8e38",
    "inserted_at": "2018-08-28T21:26:56.506913",
    "msatoshi": 1000,
    "processed_at": "2018-08-28T21:26:56.506803",
    "state": "approved"
  }
}
201 Created

{
  "data": {
    "description": "Free BTC",
    "id": "c43b6820-0ea5-4869-80a5-095cb1ae8e38",
    "inserted_at": "2018-08-28T21:26:56.506913",
    "msatoshi": 1000,
    "processed_at": "2018-08-28T21:26:56.506803",
    "state": "approved"
  }
}
#+end_example

**** Failure: Expired
#+BEGIN_SRC python :cache yes
  email_expired_src_trn = silent(lambda: POST('/api/wallet/transactions', {
      "to_email": "a@b.cz",
      "msatoshi": 1000,
      "description": "Free BTC",
      "expires_after": 0          # already expired
  }))['data']
#+END_SRC

#+RESULTS[b463bddae0f43638809d5729731e7775931b62d5]:

#+BEGIN_SRC python :cache yes
  _ = POST('/api/wallet/transactions', {"claim_token": "4e2474f0-b999-4c02-860b-95c270f7cb22"})
#+END_SRC

#+RESULTS[eacd3b8a1c53eb82831de2f684f4efb1e527fd93]:
: 400 Bad Request
: 
: {
:   "error": {
:     "detail": "Non-claimable transaction"
:   }
: }

*** Payer sees that transaction has been claimed
- status :: approved
- processed_at :: timestamp of claim event

#+BEGIN_SRC python :cache yes
  _ = GET('/api/wallet/transactions/' + email_src_trn['id'])
#+END_SRC

#+RESULTS[ac191976045a44a7891a7bf1e99d15dc8f1b8378]:
#+begin_example
200 OK

{
  "data": {
    "claim_expires_at": "2018-08-28T08:49:14.859790",
    "description": "Free BTC",
    "id": "bf1f4de9-18c1-4d6a-a315-88a782f58d03",
    "inserted_at": "2018-08-28T08:34:14.859925",
    "msatoshi": -1000,
    "processed_at": "2018-08-28T08:34:37.423418",
    "state": "approved"
  }
}
#+end_example
