#+PROPERTY: header-args :session api :results output :exports both

#+NAME: token
#+BEGIN_SRC shell :session none :results output silent :exports none
  make -s -C .. token
#+END_SRC
#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :results output silent :var token=token :exports none
  import subprocess
  import http.client
  import json
  
  token = token.strip()
  verbose = True

  def pp(data):
    print(json.dumps(data, indent=2, sort_keys=True))
    
  def silent(fn):
    global verbose
    verbose = False
    res = fn()
    verbose = True
    return res

  def api(method, url, data):
    conn = http.client.HTTPConnection('localhost:4000')
    conn.request(method, url, json.dumps(data) if data else None, {
      'Content-type': 'application/json',
      'Authorization': 'Bearer ' + token
    })
    response = conn.getresponse()
    
    if verbose:
      print("{} {}".format(response.status, response.reason))
    if response.status >= 200 and response.status <= 500:
      data = json.loads(response.read().decode())
      if verbose:
        print()
        print(json.dumps(data, indent=2, sort_keys=True))
      return data

  def GET(url):
    return api('GET', url, None)

  def POST(url, data):
    return api('POST', url, data)
#+END_SRC

* Wallet info
#+BEGIN_SRC python
  _ = GET('/api/wallet')
#+END_SRC

#+RESULTS:
#+begin_example
200 OK

{
  "data": {
    "balance": {
      "msatoshi": 1000000000
    },
    "id": "9772b51f-77df-473c-8308-fab9f9938314"
  }
}
#+end_example
* Invoice info
#+BEGIN_SRC python
  _ = GET('/api/wallet/invoice/lntb1500n1pd0c66dpp5p8rpzxck9u7umfl9u7dqratj8rlfthe29xl6ejhwt2exuaxfpftqdqvg9jxgg8zn2sscqzysyv8kgctq7haghaus4wqd262mxr9342mvp23gdsv6vmgkce9zgshjd0av06dq3xpe8cy6fucnj454smkqxuetyvu3h5jggx2w8ethlvcp6g3ldq')
#+END_SRC

#+RESULTS:
: 200 OK
: 
: {
:   "data": {
:     "description": "Foobar #ldq",
:     "dst_alias": "SomeNodeAlias #039",
:     "msatoshi": 150000
:   }
: }
* Process transaction (invoice)
#+BEGIN_SRC python
  _ = POST('/api/wallet/transactions', {"invoice": "lntb1500n1pd0c66dpp5p8rpzxck9u7umfl9u7dqratj8rlfthe29xl6ejhwt2exuaxfpftqdqvg9jxgg8zn2sscqzysyv8kgctq7haghaus4wqd262mxr9342mvp23gdsv6vmgkce9zgshjd0av06dq3xpe8cy6fucnj454smkqxuetyvu3h5jggx2w8ethlvcp6g3ldq"})
#+END_SRC

#+RESULTS:
#+begin_example
201 Created

{
  "data": {
    "description": "Foobar #ldq",
    "id": "3d2084b8-3f2f-4b0c-9eff-25b73a03f4b1",
    "inserted_at": "2018-08-28T21:52:03.594358",
    "invoice": "lntb1500n1pd0c66dpp5p8rpzxck9u7umfl9u7dqratj8rlfthe29xl6ejhwt2exuaxfpftqdqvg9jxgg8zn2sscqzysyv8kgctq7haghaus4wqd262mxr9342mvp23gdsv6vmgkce9zgshjd0av06dq3xpe8cy6fucnj454smkqxuetyvu3h5jggx2w8ethlvcp6g3ldq",
    "msatoshi": -150000,
    "processed_at": "2018-08-28T21:52:03.636942",
    "state": "approved"
  }
}
#+end_example
* List transactions
#+BEGIN_SRC python
  _ = GET('/api/wallet/transactions')
#+END_SRC

#+RESULTS:
#+begin_example
200 OK

{
  "data": [
    {
      "description": "Foobar #ldq",
      "id": "3d2084b8-3f2f-4b0c-9eff-25b73a03f4b1",
      "inserted_at": "2018-08-28T21:52:03.594358",
      "invoice": "lntb1500n1pd0c66dpp5p8rpzxck9u7umfl9u7dqratj8rlfthe29xl6ejhwt2exuaxfpftqdqvg9jxgg8zn2sscqzysyv8kgctq7haghaus4wqd262mxr9342mvp23gdsv6vmgkce9zgshjd0av06dq3xpe8cy6fucnj454smkqxuetyvu3h5jggx2w8ethlvcp6g3ldq",
      "msatoshi": -150000,
      "processed_at": "2018-08-28T21:52:03.636942",
      "state": "approved"
    },
    {
      "description": "Funding transaction",
      "id": "cd54fe19-c7af-4507-b1de-93fb6bae3b8d",
      "inserted_at": "2018-08-28T21:51:55.976935",
      "msatoshi": 1000000000,
      "processed_at": null,
      "state": "approved"
    }
  ]
}
#+end_example
* Send Bitcoin to email address
** Create transaction (payer)
#+BEGIN_SRC python :cache yes
  email_src_trn = POST('/api/wallet/transactions', {
      "to_email": "a@b.cz",
      "msatoshi": 1000,
      "description": "Free BTC",    # optional - visible to both payee & payer
      "expires_after": 900          # in seconds
  })['data']
#+END_SRC

#+RESULTS[add74a74026bf272a0270247a1c37396ad10f1ee]:
#+begin_example
201 Created

{
  "data": {
    "claim_expires_at": "2018-08-28T22:07:16.771441",
    "description": "Free BTC",
    "id": "4d8c598a-474a-40f6-8142-58def5269c0c",
    "inserted_at": "2018-08-28T21:52:16.771519",
    "msatoshi": -1000,
    "processed_at": null,
    "state": "initial"
  }
}
#+end_example

*** With amount exceeding wallet balance
It returns declined transaction.

#+BEGIN_SRC python
  wallet = silent(lambda: GET('/api/wallet'))
  _ = POST('/api/wallet/transactions', {
      "to_email": "a@b.cz",
      "msatoshi": wallet['data']['balance']['msatoshi'] + 1,
      "description": "Free BTC",
      "expires_after": 900
  })
#+END_SRC

#+RESULTS:
#+begin_example
201 Created

{
  "data": {
    "claim_expires_at": "2018-08-28T22:07:27.163869",
    "description": "Free BTC",
    "id": "f2db29a1-c7f0-4bc0-9584-a64c2f4248ba",
    "inserted_at": "2018-08-28T21:52:27.163944",
    "msatoshi": -999849001,
    "processed_at": "2018-08-28T21:52:27.169756",
    "state": "declined"
  }
}
#+end_example

*** With invalid amount
#+BEGIN_SRC python
  _ = POST('/api/wallet/transactions', {
      "to_email": "a@b.cz",
      "msatoshi": -1000, # <- can't send negative amount
      "description": "Free BTC",
      "expires_after": 900
  })
#+END_SRC

#+RESULTS:
: 400 Bad Request
: 
: {
:   "error": {
:     "detail": "Non-positive amount given"
:   }
: }

** Claim transaction (payee)
*** Success
#+BEGIN_SRC python :cache yes
  _ = POST('/api/wallet/transactions', {"claim_token": "4470892b-acef-4a9f-8b02-861ceadd6c39"})
#+END_SRC

#+RESULTS[5b2b0aed0aad3d82b47698fdfa0dcb757f059e3d]:
#+begin_example
201 Created

{
  "data": {
    "description": "Free BTC",
    "id": "ab619809-5a0a-48b5-bf01-5ac53c4f5b2c",
    "inserted_at": "2018-08-28T21:52:48.713919",
    "msatoshi": 1000,
    "processed_at": "2018-08-28T21:52:48.713790",
    "state": "approved"
  }
}
#+end_example

**** Call is idempotent
#+BEGIN_SRC python :cache yes
  _ = POST('/api/wallet/transactions', {"claim_token": "4470892b-acef-4a9f-8b02-861ceadd6c39"})
  _ = POST('/api/wallet/transactions', {"claim_token": "4470892b-acef-4a9f-8b02-861ceadd6c39"})
#+END_SRC

#+RESULTS[a129bccb4a74e0c1770fd416967894f57b30a2fc]:
#+begin_example
201 Created

{
  "data": {
    "description": "Free BTC",
    "id": "ab619809-5a0a-48b5-bf01-5ac53c4f5b2c",
    "inserted_at": "2018-08-28T21:52:48.713919",
    "msatoshi": 1000,
    "processed_at": "2018-08-28T21:52:48.713790",
    "state": "approved"
  }
}
201 Created

{
  "data": {
    "description": "Free BTC",
    "id": "ab619809-5a0a-48b5-bf01-5ac53c4f5b2c",
    "inserted_at": "2018-08-28T21:52:48.713919",
    "msatoshi": 1000,
    "processed_at": "2018-08-28T21:52:48.713790",
    "state": "approved"
  }
}
#+end_example

*** Failure: Expired
#+BEGIN_SRC python :cache yes
  email_expired_src_trn = silent(lambda: POST('/api/wallet/transactions', {
      "to_email": "a@b.cz",
      "msatoshi": 1000,
      "description": "Free BTC",
      "expires_after": 0          # already expired
  }))['data']
#+END_SRC

#+RESULTS[c52c935e7c6984a2470a89f719ec7a47af0d6bbe]:

#+BEGIN_SRC python :cache yes
  _ = POST('/api/wallet/transactions', {"claim_token": "84507a20-852c-49c5-a2cb-1740766bdbb2"})
#+END_SRC

#+RESULTS[f70b466e75a5470a702e752bb3c26a0e61ae481c]:
: 400 Bad Request
: 
: {
:   "error": {
:     "detail": "Non-claimable transaction"
:   }
: }

** Payer sees that transaction has been claimed
- status :: approved
- processed_at :: timestamp of claim event

#+BEGIN_SRC python
  _ = GET('/api/wallet/transactions/' + email_src_trn['id'])
#+END_SRC

#+RESULTS:
#+begin_example
200 OK

{
  "data": {
    "claim_expires_at": "2018-08-28T22:07:16.771441",
    "description": "Free BTC",
    "id": "4d8c598a-474a-40f6-8142-58def5269c0c",
    "inserted_at": "2018-08-28T21:52:16.771519",
    "msatoshi": -1000,
    "processed_at": "2018-08-28T21:52:48.716889",
    "state": "approved"
  }
}
#+end_example

