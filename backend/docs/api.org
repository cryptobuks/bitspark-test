#+PROPERTY: header-args :session api :results output :exports both

#+NAME: token
#+BEGIN_SRC shell :session none :results output silent :exports none
  make -s -C .. token
#+END_SRC
#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :results output silent :var token=token :exports none
  import subprocess
  import http.client
  import json
  
  token = token.strip()
  verbose = True

  def pp(data):
    print(json.dumps(data, indent=2, sort_keys=True))
    
  def silent(fn):
    global verbose
    verbose = False
    res = fn()
    verbose = True
    return res

  def api(method, url, data):
    conn = http.client.HTTPConnection('localhost:4000')
    conn.request(method, url, json.dumps(data) if data else None, {
      'Content-type': 'application/json',
      'Authorization': 'Bearer ' + token
    })
    response = conn.getresponse()
    
    if verbose:
      print("{} {}".format(response.status, response.reason))
    if response.status >= 200 and response.status <= 500:
      result = response.read().decode()
      data = json.loads(result)
      if verbose:
        print()
        print(json.dumps(data, indent=2, sort_keys=True))
      return data

  def GET(url):
    return api('GET', url, None)

  def POST(url, data):
    return api('POST', url, data)

  def load(query_name):
    return open('../../queries/{}.graphql'.format(query_name)).read()

  def gql(query, **kw):
    return POST('/api/q', {"query": query, "variables": kw})
#+END_SRC

* Wallet info
#+BEGIN_SRC python
  _ = gql("""
    query {
      currentUserWallet {
        id
        balance { msatoshi }
        transactions {
          id
          msatoshi
          description
          state
        }
       }
    }
  """)
#+END_SRC

#+RESULTS:
#+begin_example
200 OK

{
  "data": {
    "currentUserWallet": {
      "balance": {
        "msatoshi": 1000000000
      },
      "id": "f4af3ee3-47d9-4f40-9741-3329917b582b",
      "transactions": [
        {
          "description": "Funding transaction",
          "id": "5634abea-d277-4158-b666-856be5996ca3",
          "msatoshi": 1000000000,
          "state": "APPROVED"
        }
      ]
    }
  }
}
#+end_example

* Invoice info
#+BEGIN_SRC python
  _ = GET('/api/wallet/invoice/lntb1500n1pd0c66dpp5p8rpzxck9u7umfl9u7dqratj8rlfthe29xl6ejhwt2exuaxfpftqdqvg9jxgg8zn2sscqzysyv8kgctq7haghaus4wqd262mxr9342mvp23gdsv6vmgkce9zgshjd0av06dq3xpe8cy6fucnj454smkqxuetyvu3h5jggx2w8ethlvcp6g3ldq')
#+END_SRC

#+RESULTS:
: 200 OK
: 
: {
:   "data": {
:     "description": "Foobar #ldq",
:     "dst_alias": "SomeNodeAlias #039",
:     "msatoshi": 150000
:   }
: }
* Process lightning transaction
#+BEGIN_SRC python
  _ = gql(
      """
          mutation processLightningTransaction($input: ProcessLightningTransactionInput!) {
            processLightningTransaction(input: $input) {
              transaction {
                id
                msatoshi
              }
            }
          }
      """,
      input={"invoice": "lntb1500n1pd0c66dpp5p8rpzxck9u7umfl9u7dqratj8rlfthe29xl6ejhwt2exuaxfpftqdqvg9jxgg8zn2sscqzysyv8kgctq7haghaus4wqd262mxr9342mvp23gdsv6vmgkce9zgshjd0av06dq3xpe8cy6fucnj454smkqxuetyvu3h5jggx2w8ethlvcp6g3ldq"})
#+END_SRC

#+RESULTS:
#+begin_example
200 OK

{
  "data": {
    "processLightningTransaction": {
      "transaction": {
        "id": "36c218e4-945f-41a9-a296-d06db467c090",
        "msatoshi": -150000
      }
    }
  }
}
#+end_example
* Send Bitcoin to email address
** Create transaction (payer)
#+NAME: processEmailTransaction
#+BEGIN_SRC text :tangle ../../queries/processEmailTransaction.graphql
mutation processEmailTransaction($input: ProcessEmailTransactionInput!) {
  processEmailTransaction(input: $input) {
    transaction {
      id
      state
      msatoshi
      description
    }
  }
}
#+END_SRC

#+BEGIN_SRC python
  _ = gql(
      load('processEmailTransaction'),
      input={
          "toEmail": "to@example.com",
          "msatoshi": 1000,
          "description": "Free BTC",
          "expiresAfter": 900
      })
#+END_SRC

#+RESULTS:
#+begin_example
200 OK

{
  "data": {
    "processEmailTransaction": {
      "transaction": {
        "description": "Free BTC",
        "id": "e7705617-61f2-4811-816a-fdce6c564877",
        "msatoshi": -1000,
        "state": "INITIAL"
      }
    }
  }
}
#+end_example
*** With amount exceeding wallet balance
It returns declined transaction.

#+BEGIN_SRC python
  balance = silent(lambda: query('{ currentUserWallet { balance { msatoshi } } }'))['data']['currentUserWallet']['balance']
  _ = gql(
      load('processEmailTransaction'),
      input={
        "toEmail": "to@example.com",
        "msatoshi": balance['msatoshi'] + 1,
        "description": "Free BTC",
        "expiresAfter": 900
      })
#+END_SRC

#+RESULTS:
#+begin_example
200 OK

{
  "data": {
    "processEmailTransaction": {
      "transaction": {
        "description": "Free BTC",
        "id": "dc827eca-bfc1-494a-b59f-2a20f4402c05",
        "msatoshi": -999999001,
        "state": "DECLINED"
      }
    }
  }
}
#+end_example

** Claim transaction (payee)
*** Success
#+NAME: claimTransaction
#+BEGIN_SRC text :tangle ../../queries/claimTransaction.graphql
mutation claimTransaction($input: ClaimTransactionInput!) {
  claimTransaction(input: $input) {
    transaction {
      id
      state
      msatoshi
      description
    }
  }
}
#+END_SRC

When called multiple times it returns same transaction (i.e. it's idempotent).

#+BEGIN_SRC python :cache yes
  _ = gql(
      load('claimTransaction'),
      input={
        "claimToken": "cb4db7e1-c1c9-4f42-82ab-ab4b829d0389"
      })
#+END_SRC

#+RESULTS[cce1a198edf90d8b0426dea5c03f96994ec8c0e0]:
#+begin_example
200 OK

{
  "data": {
    "claimTransaction": {
      "transaction": {
        "description": "Free BTC",
        "id": "e4a65fd0-c786-4aac-b70b-e87b6c519203",
        "msatoshi": 1000,
        "state": "APPROVED"
      }
    }
  }
}
#+end_example
*** Failure: Expired
#+BEGIN_SRC python
  _ = silent(lambda: gql(
      load('processEmailTransaction'),
      input={
        "toEmail": "to@example.com",
        "msatoshi": 1000,
        "description": "Free BTC",
        "expiresAfter": 0          # already expired
      }))
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :cache yes
  _ = gql(
      load('claimTransaction'),
      input={
        "claimToken": "7b9af26f-4b70-4807-8f9e-b64ad0cc843c"
      })
#+END_SRC

#+RESULTS[44a0e4029eb4dbb42931dd16b731e987d7f8afcf]:
#+begin_example
200 OK

{
  "data": {
    "claimTransaction": null
  },
  "errors": [
    {
      "locations": [
        {
          "column": 0,
          "line": 2
        }
      ],
      "message": "Non-claimable transaction",
      "path": [
        "claimTransaction"
      ]
    }
  ]
}
#+end_example
** Payer sees that transaction has been claimed
Status of transaction is =approved= and =processed_at= field marks time of claim event.

#+BEGIN_SRC python
  _ = GET('/api/wallet/transactions/' + email_src_trn['id'])
#+END_SRC

#+RESULTS:
#+begin_example
200 OK

{
  "data": {
    "claim_expires_at": "2018-08-30T18:11:50.486755",
    "description": "Free BTC",
    "id": "932deaaf-5969-4654-a8da-f9d43791721b",
    "inserted_at": "2018-08-30T17:56:50.486867",
    "msatoshi": -1000,
    "processed_at": "2018-08-30T17:57:33.678304",
    "state": "approved",
    "to_email": "to@example.com"
  }
}
#+end_example
* Other
** Currency Rates
#+BEGIN_SRC python
  _ = GET('/api/rates/BTC')
#+END_SRC

#+RESULTS:
#+begin_example
200 OK

{
  "data": {
    "BTC": {
      "AED": "25025.34",
      "AFN": "500489.79",
      "ALL": "739210.50",
      "AMD": "3289435.14",
      "ANG": "12571.72",
      "AOA": "1881863.01450000",
      "ARS": "264003.75",
      "AUD": "9390.33",
      "AWG": "12212.27",
      "AZN": "11599.13",
      "BAM": "11392.87",
      "BBD": "13626.00",
      "BCH": "12.94498382",
      "BDT": "571686.49",
      "BGN": "11421.49",
      "BHD": "2569.659",
      "BIF": "12062092",
      "BMD": "6813.00",
      "BND": "10292.42",
      "BOB": "47084.40",
      "BRL": "28391.09",
      "BSD": "6813.00",
      "BTC": "1.00000000",
      "BTN": "482270.37",
      "BWP": "72377.84",
      "BYN": "14179.99",
      "BYR": "141799855",
      "BZD": "13695.91",
      "CAD": "8852.82",
      "CDF": "11185325.23",
      "CHF": "6605.95",
      "CLF": "159.2879",
      "CLP": "4624664",
      "CNH": "46792.13",
      "CNY": "46640.94",
      "COP": "20491924.30",
      "CRC": "3883914.67",
      "CUC": "6813.00",
      "CVE": "644942.43",
      "CZK": "150516.34",
      "DJF": "1213055",
      "DKK": "43545.11",
      "DOP": "340684.06",
      "DZD": "802474.18",
      "EEK": "99563.08",
      "EGP": "121473.26",
      "ERN": "102167.07",
      "ETB": "188267.36",
      "ETC": "542.00542005",
      "ETH": "24.80466328",
      "EUR": "5849.01",
      "FJD": "14368.34",
      "FKP": "5234.95",
      "GBP": "5263.88",
      "GEL": "16888.69",
      "GGP": "5234.95",
      "GHS": "32247.29",
      "GIP": "5234.95",
      "GMD": "327194.32",
      "GNF": "61644780",
      "GTQ": "51582.61",
      "GYD": "1429897.40",
      "HKD": "53477.40",
      "HNL": "163562.83",
      "HRK": "43432.06",
      "HTG": "470114.95",
      "HUF": "1909902",
      "IDR": "98053200.73",
      "ILS": "24616.05",
      "IMP": "5234.95",
      "INR": "483825.20",
      "IQD": "8130824.630",
      "ISK": "730967",
      "JEP": "5234.95",
      "JMD": "931132.71",
      "JOD": "4833.864",
      "JPY": "756746",
      "KES": "685728.45",
      "KGS": "464220.66",
      "KHR": "27800477.98",
      "KMF": "2902963",
      "KRW": "7590295",
      "KWD": "2062.840",
      "KYD": "5678.27",
      "KZT": "2477771.99",
      "LAK": "58027093.11",
      "LBP": "10309306.60",
      "LKR": "1100026.98",
      "LRD": "1050905.02",
      "LSL": "97722.36",
      "LTC": "115.40680900",
      "LTL": "21970.87",
      "LVL": "4471.11",
      "LYD": "9399.440",
      "MAD": "64051.74",
      "MDL": "114188.22",
      "MGA": "22690515.0",
      "MKD": "359556.08",
      "MMK": "10425197.73",
      "MNT": "16638481.50",
      "MOP": "55084.08",
      "MRO": "2432241.0",
      "MTL": "4658.31",
      "MUR": "233685.13",
      "MVR": "105328.95",
      "MWK": "4954486.10",
      "MXN": "130107.52",
      "MYR": "28041.66",
      "MZN": "407315.20",
      "NAD": "98277.52",
      "NGN": "2466646.65",
      "NIO": "217603.12",
      "NOK": "56845.44",
      "NPR": "771644.58",
      "NZD": "10260.76",
      "OMR": "2623.039",
      "PAB": "6813.00",
      "PEN": "22543.90",
      "PGK": "22576.09",
      "PHP": "364263.37",
      "PKR": "838169.32",
      "PLN": "25124.32",
      "PYG": "39735779",
      "QAR": "24806.13",
      "RON": "27162.24",
      "RSD": "690047.42",
      "RUB": "464452.43",
      "RWF": "5998786",
      "SAR": "25554.54",
      "SBD": "53748.51",
      "SCR": "92722.31",
      "SEK": "62172.68",
      "SGD": "9317.23",
      "SHP": "5234.95",
      "SLL": "57161070.00",
      "SOS": "3941839.33",
      "SRD": "50811.35",
      "SSP": "887484.54",
      "STD": "143417735.14",
      "SVC": "59624.38",
      "SZL": "97722.18",
      "THB": "223262.01",
      "TJS": "64187.32",
      "TMT": "23879.42",
      "TND": "18713.982",
      "TOP": "15741.70",
      "TRY": "45324.49",
      "TTD": "45926.09",
      "TWD": "209401.68",
      "TZS": "15547266.00",
      "UAH": "191717.82",
      "UGX": "25637476",
      "USD": "6813.00",
      "UYU": "218103.44",
      "UZS": "53335116.18",
      "VEF": "1692837752.78",
      "VND": "157454495",
      "VUV": "739208",
      "WST": "17635.68",
      "XAF": "3830942",
      "XAG": "468",
      "XAU": "6",
      "XCD": "18412.47",
      "XDR": "4857",
      "XOF": "3830942",
      "XPD": "7",
      "XPF": "696925",
      "XPT": "9",
      "YER": "1705629.64",
      "ZAR": "100397.18",
      "ZMK": "35789201.71",
      "ZMW": "69329.09",
      "ZWL": "2196204.69"
    }
  }
}
#+end_example

